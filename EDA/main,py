
from matplotlib import pyplot as plt
import pandas as pd
import numpy as np
from sklearn.decomposition import PCA
from sklearn.feature_selection import SelectKBest, f_classif
from sklearn.impute import SimpleImputer
from sklearn.manifold import TSNE
from sklearn.preprocessing import StandardScaler
import plotly.express as px
import os
import seaborn as sns

class AutomatedEDA:
    def __init__(self, data):
        self.data = data

    def preprocess_data(self):
    # Identify numeric columns
        numeric_columns = self.data.select_dtypes(include=['float64', 'int64']).columns

    # Handling missing values for numeric columns
        imputer_numeric = SimpleImputer(strategy='mean')
        self.data[numeric_columns] = imputer_numeric.fit_transform(self.data[numeric_columns])

    # Categorical feature encoding
        categorical_columns = self.data.select_dtypes(include=['object']).columns
        self.data = pd.get_dummies(self.data, columns=categorical_columns, drop_first=True)

    # Numerical feature scaling
        scaler = StandardScaler()
        self.data[numeric_columns] = scaler.fit_transform(self.data[numeric_columns])

    def visualize_data(self):
        for column in self.data.columns:
            if self.data[column].dtype == 'float64' or self.data[column].dtype == 'int64':
                # Histogram for numerical columns
                plt.figure(figsize=(8, 6))
                sns.histplot(self.data[column], kde=True)
                plt.title(f'Histogram of {column}')
                plt.xlabel(column)
                plt.ylabel('Frequency')
                plt.show()
            else:
                # Bar plot for categorical columns
                plt.figure(figsize=(8, 6))
                sns.countplot(x=column, data=self.data)
                plt.title(f'Count of {column}')
                plt.xlabel(column)
                plt.ylabel('Count')
                plt.xticks(rotation=45)
                plt.show()

    def select_features(self):
        # Feature selection
        selector = SelectKBest(score_func=f_classif, k=5)
        X = self.data.drop('Passenger Count', axis=1)  # Assuming 'Passenger Count' is the target column
        y = self.data['Passenger Count']
        X_new = selector.fit_transform(X, y)
        selected_features = X.columns[selector.get_support(indices=True)]

        # Dimensionality reduction
        pca = PCA(n_components=2)
        X_pca = pca.fit_transform(X)
        tsne = TSNE(n_components=2)
        X_tsne = tsne.fit_transform(X)

        return selected_features, X_pca, X_tsne

    def display_dashboard(self):
        # Display interactive dashboard
        # You can customize this part using Plotly or any other interactive visualization library
        pass

    def run(self):
        self.preprocess_data()
        self.visualize_data()
        selected_features, X_pca, X_tsne = self.select_features()
        self.display_dashboard()

def load_data(file_path):
    # Check if file exists
    if not os.path.exists(file_path):
        print(f"File '{file_path}' does not exist.")
        return None

    # Load data
    try:
        data = pd.read_csv(file_path)
        print("Data loaded successfully.")
        return data
    except Exception as e:
        print(f"Error loading data: {e}")
        return None

def main():
    # Load data
    file_path = "archive/International_Report_Passengers.csv"
    
    # Check if file exists
    if not os.path.exists(file_path):
        print(f"File '{file_path}' does not exist.")
        return

    data = load_data(file_path)

    if data is not None:
        # Create an instance of AutomatedEDA
        eda_tool = AutomatedEDA(data)

        # Run the tool
        eda_tool.run()

if __name__ == "__main__":
    main()
